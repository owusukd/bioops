version: '3.8'

services:
  bioops:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bioops-app
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      # Persist analysis results
      - ./tempDownloadDir:/app/tempDownloadDir
      - ./logs:/app/logs
      # Configuration files
      - ./config:/app/config:ro
      # For development - mount source code
      # - ./bioops.py:/app/bioops.py:ro
      # - ./protFuncs.py:/app/protFuncs.py:ro
    environment:
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - LOG_FILE_PATH=${LOG_FILE_PATH:-logs/bioops.log}
      - LOG_MAX_SIZE=${LOG_MAX_SIZE:-10485760}
      - LOG_BACKUP_COUNT=${LOG_BACKUP_COUNT:-5}
      - LOG_TO_FILE=true
      # Analysis Configuration
      - ANALYSIS_TIMEOUT=${ANALYSIS_TIMEOUT:-900}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-52428800}
      - TEMP_DIR=${TEMP_DIR:-tempDownloadDir}
      # Performance Configuration
      - MAX_WORKERS=${MAX_WORKERS:-8}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_TTL=${CACHE_TTL:-3600}
      # Streamlit Configuration
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    networks:
      - bioops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    
  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: bioops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bioops
    networks:
      - bioops-network
    profiles:
      - production

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bioops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - bioops-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: bioops-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - bioops-network
    profiles:
      - monitoring

  # Optional: Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: bioops-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - bioops-network
    profiles:
      - monitoring

  # Optional: Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: bioops-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/bioops:ro
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - bioops-network
    profiles:
      - monitoring

networks:
  bioops-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
